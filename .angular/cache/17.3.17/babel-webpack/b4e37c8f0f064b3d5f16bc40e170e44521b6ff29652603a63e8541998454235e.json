{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./collaboration.service\";\nexport class CursorService {\n  constructor(collaborationService, ngZone) {\n    this.collaborationService = collaborationService;\n    this.ngZone = ngZone;\n    this.collaborativeCursorsSubject = new BehaviorSubject([]);\n    this.currentCursors = new Map();\n    this.collaborativeCursors$ = this.collaborativeCursorsSubject.asObservable();\n    this.initializeCursorTracking();\n    this.listenForCollaborativeCursors();\n  }\n  initializeCursorTracking() {\n    this.ngZone.runOutsideAngular(() => {\n      let throttleTimeout = null;\n      document.addEventListener('mousemove', event => {\n        if (throttleTimeout) return;\n        throttleTimeout = setTimeout(() => {\n          this.ngZone.run(() => {\n            this.sendCursorPosition(event.clientX, event.clientY);\n          });\n          throttleTimeout = null;\n        }, 16); // ~60fps\n      });\n      // Hide cursor when mouse leaves the document\n      document.addEventListener('mouseleave', () => {\n        this.ngZone.run(() => {\n          this.sendCursorPosition(-1000, -1000);\n        });\n      });\n    });\n  }\n  listenForCollaborativeCursors() {\n    this.collaborationService.getCollaborativeEvents().subscribe(event => {\n      if (event.type === 'cursor-move') {\n        const cursorEvent = event.data;\n        // Don't show our own cursor\n        const currentUser = this.collaborationService.getCurrentUser();\n        if (currentUser && cursorEvent.userId === currentUser.id) {\n          return;\n        }\n        this.updateCollaborativeCursor(cursorEvent);\n      }\n    });\n  }\n  sendCursorPosition(x, y) {\n    const currentUser = this.collaborationService.getCurrentUser();\n    if (!currentUser) return;\n    const cursorEvent = {\n      x,\n      y,\n      userId: currentUser.id,\n      userName: currentUser.name\n    };\n    this.collaborationService.sendEvent({\n      type: 'cursor-move',\n      data: cursorEvent\n    });\n  }\n  updateCollaborativeCursor(cursorEvent) {\n    // Hide cursor if it's off-screen\n    if (cursorEvent.x < 0 || cursorEvent.y < 0) {\n      this.currentCursors.delete(cursorEvent.userId);\n    } else {\n      this.currentCursors.set(cursorEvent.userId, cursorEvent);\n    }\n    // Remove stale cursors (older than 5 seconds)\n    const now = Date.now();\n    for (const [userId, cursor] of this.currentCursors.entries()) {\n      if (now - cursor.lastUpdate > 5000) {\n        this.currentCursors.delete(userId);\n      }\n    }\n    // Update the observable\n    this.collaborativeCursorsSubject.next(Array.from(this.currentCursors.values()));\n  }\n  clearAllCursors() {\n    this.currentCursors.clear();\n    this.collaborativeCursorsSubject.next([]);\n  }\n  static {\n    this.ɵfac = function CursorService_Factory(t) {\n      return new (t || CursorService)(i0.ɵɵinject(i1.CollaborationService), i0.ɵɵinject(i0.NgZone));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CursorService,\n      factory: CursorService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","CursorService","constructor","collaborationService","ngZone","collaborativeCursorsSubject","currentCursors","Map","collaborativeCursors$","asObservable","initializeCursorTracking","listenForCollaborativeCursors","runOutsideAngular","throttleTimeout","document","addEventListener","event","setTimeout","run","sendCursorPosition","clientX","clientY","getCollaborativeEvents","subscribe","type","cursorEvent","data","currentUser","getCurrentUser","userId","id","updateCollaborativeCursor","x","y","userName","name","sendEvent","delete","set","now","Date","cursor","entries","lastUpdate","next","Array","from","values","clearAllCursors","clear","i0","ɵɵinject","i1","CollaborationService","NgZone","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Regis\\_RegisGitProjects\\SyncUI\\src\\app\\services\\cursor.service.ts"],"sourcesContent":["import { Injectable, NgZone } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { CollaborationService } from './collaboration.service';\r\nimport { CursorMoveEvent } from './collaboration.types';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CursorService {\r\n  private collaborativeCursorsSubject = new BehaviorSubject<CursorMoveEvent[]>([]);\r\n  private currentCursors = new Map<string, CursorMoveEvent>();\r\n  \r\n  public collaborativeCursors$ = this.collaborativeCursorsSubject.asObservable();\r\n\r\n  constructor(\r\n    private collaborationService: CollaborationService,\r\n    private ngZone: NgZone\r\n  ) {\r\n    this.initializeCursorTracking();\r\n    this.listenForCollaborativeCursors();\r\n  }\r\n\r\n  private initializeCursorTracking(): void {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      let throttleTimeout: any = null;\r\n\r\n      document.addEventListener('mousemove', (event: MouseEvent) => {\r\n        if (throttleTimeout) return;\r\n        \r\n        throttleTimeout = setTimeout(() => {\r\n          this.ngZone.run(() => {\r\n            this.sendCursorPosition(event.clientX, event.clientY);\r\n          });\r\n          throttleTimeout = null;\r\n        }, 16); // ~60fps\r\n      });\r\n\r\n      // Hide cursor when mouse leaves the document\r\n      document.addEventListener('mouseleave', () => {\r\n        this.ngZone.run(() => {\r\n          this.sendCursorPosition(-1000, -1000);\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  private listenForCollaborativeCursors(): void {\r\n    this.collaborationService.getCollaborativeEvents().subscribe((event: any) => {\r\n      if (event.type === 'cursor-move') {\r\n        const cursorEvent = event.data as CursorMoveEvent;\r\n        \r\n        // Don't show our own cursor\r\n        const currentUser = this.collaborationService.getCurrentUser();\r\n        if (currentUser && cursorEvent.userId === currentUser.id) {\r\n          return;\r\n        }\r\n\r\n        this.updateCollaborativeCursor(cursorEvent);\r\n      }\r\n    });\r\n  }\r\n\r\n  private sendCursorPosition(x: number, y: number): void {\r\n    const currentUser = this.collaborationService.getCurrentUser();\r\n    if (!currentUser) return;\r\n\r\n    const cursorEvent: CursorMoveEvent = {\r\n      x,\r\n      y,\r\n      userId: currentUser.id,\r\n      userName: currentUser.name\r\n    };\r\n\r\n    this.collaborationService.sendEvent({\r\n      type: 'cursor-move',\r\n      data: cursorEvent\r\n    });\r\n  }\r\n\r\n  private updateCollaborativeCursor(cursorEvent: CursorMoveEvent): void {\r\n    // Hide cursor if it's off-screen\r\n    if (cursorEvent.x < 0 || cursorEvent.y < 0) {\r\n      this.currentCursors.delete(cursorEvent.userId);\r\n    } else {\r\n      this.currentCursors.set(cursorEvent.userId, cursorEvent);\r\n    }\r\n\r\n    // Remove stale cursors (older than 5 seconds)\r\n    const now = Date.now();\r\n    for (const [userId, cursor] of this.currentCursors.entries()) {\r\n      if (now - (cursor as any).lastUpdate > 5000) {\r\n        this.currentCursors.delete(userId);\r\n      }\r\n    }\r\n\r\n    // Update the observable\r\n    this.collaborativeCursorsSubject.next(Array.from(this.currentCursors.values()));\r\n  }\r\n\r\n  public clearAllCursors(): void {\r\n    this.currentCursors.clear();\r\n    this.collaborativeCursorsSubject.next([]);\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}